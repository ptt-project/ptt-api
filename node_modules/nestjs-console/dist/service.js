"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ConsoleService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleService = void 0;
const common_1 = require("@nestjs/common");
const commander = require("commander");
const decorators_1 = require("./decorators");
let ConsoleService = ConsoleService_1 = class ConsoleService {
    constructor(cli) {
        this.commands = new Map();
        this.cli = cli;
    }
    static createCli(name) {
        const cli = new commander.Command(name);
        cli.storeOptionsAsProperties(false);
        cli.allowUnknownOption(false);
        return cli;
    }
    resetCli() {
        this.cli = ConsoleService_1.createCli();
    }
    getRootCli() {
        return this.cli;
    }
    getCli(name) {
        let cli;
        if (typeof name === 'string') {
            cli = this.commands.get(name);
        }
        else {
            cli = this.cli;
        }
        return cli;
    }
    setContainer(container) {
        this.container = container;
        return this;
    }
    getContainer() {
        return this.container;
    }
    static createHandler(action) {
        return (...args) => __awaiter(this, void 0, void 0, function* () {
            const command = args.find((c) => c instanceof commander.Command);
            let data;
            if (typeof action === 'object') {
                data = action.instance[action.methodName](...args);
            }
            else {
                data = action(...args);
            }
            if (data instanceof Promise) {
                data = yield data;
            }
            return { data, command };
        });
    }
    init(argv) {
        return __awaiter(this, void 0, void 0, function* () {
            const userArgs = this.cli._prepareUserArgs(argv);
            return yield this.cli._parseCommand([], userArgs);
        });
    }
    createCommand(options, handler, parent, commanderOptions) {
        const args = options.command.split(' ');
        const commandNames = args[0].split('.');
        const command = ConsoleService_1.createCli(commandNames[commandNames.length - 1]);
        if (args.length > 1) {
            command.arguments(args.slice(1).join(' '));
        }
        if (options.description !== undefined) {
            command.description(options.description);
        }
        if (options.alias !== undefined) {
            command.alias(options.alias);
        }
        if (Array.isArray(options.options)) {
            for (const opt of options.options) {
                let method = 'option';
                if (opt.required === true) {
                    method = 'requiredOption';
                }
                command[method](opt.flags, opt.description, opt.fn || opt.defaultValue, opt.defaultValue);
            }
        }
        command.action(ConsoleService_1.createHandler(handler));
        parent.addCommand(command, commanderOptions);
        this.commands.set(this.getCommandFullName(command), command);
        return command;
    }
    createGroupCommand(options, parent) {
        if (parent._args.length > 0) {
            throw new Error('Sub commands cannot be applied to command with explicit args');
        }
        const commandNames = options.command.split('.');
        const command = ConsoleService_1.createCli(commandNames[commandNames.length - 1]);
        if (options.description !== undefined) {
            command.description(options.description);
        }
        if (options.alias !== undefined) {
            command.alias(options.alias);
        }
        if (Array.isArray(options.options)) {
            for (const opt of options.options) {
                let method = 'option';
                if (opt.required === true) {
                    method = 'requiredOption';
                }
                command[method](opt.flags, opt.description, opt.fn || opt.defaultValue, opt.defaultValue);
            }
        }
        parent.addCommand(command);
        this.commands.set(this.getCommandFullName(command), command);
        return command;
    }
    getCommandFullName(command) {
        let fullName = command.name();
        let commandParent = command.parent;
        while (commandParent instanceof commander.Command && commandParent.name() !== '') {
            fullName = `${commandParent.name()}.${fullName}`;
            commandParent = commandParent.parent;
        }
        return fullName;
    }
};
ConsoleService = ConsoleService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, decorators_1.InjectCli)()),
    __metadata("design:paramtypes", [commander.Command])
], ConsoleService);
exports.ConsoleService = ConsoleService;
//# sourceMappingURL=service.js.map