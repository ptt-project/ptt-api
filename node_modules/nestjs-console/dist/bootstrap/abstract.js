"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractBootstrapConsole = void 0;
const module_1 = require("../module");
const service_1 = require("../service");
class AbstractBootstrapConsole {
    constructor(options) {
        this.options = options;
        if (!this.options.contextOptions) {
            this.options.contextOptions = {};
        }
        if (!this.options.contextOptions.logger) {
            this.options.contextOptions.logger = ['error'];
        }
    }
    useDecorators() {
        return __awaiter(this, void 0, void 0, function* () {
            const consoleModule = this.container.get(module_1.ConsoleModule);
            yield consoleModule.scan(this.container, this.options.includeModules);
            return this;
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.container = yield this.create();
            this.service = this.container.get(service_1.ConsoleService);
            this.service.setContainer(this.container);
            if (this.options.useDecorators) {
                yield this.useDecorators();
            }
            return this.container;
        });
    }
    getService() {
        return this.service;
    }
    getOptions() {
        return this.options;
    }
    boot(argv = process.argv) {
        return this.service.init(argv);
    }
}
exports.AbstractBootstrapConsole = AbstractBootstrapConsole;
//# sourceMappingURL=abstract.js.map