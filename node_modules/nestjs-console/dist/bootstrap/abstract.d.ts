import { INestApplicationContext } from '@nestjs/common';
import { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';
import { CommandResponse } from '../interfaces';
import { ConsoleService } from '../service';
export interface CommonBootstrapConsoleOptions {
    module: any;
    useDecorators?: boolean;
    includeModules?: any[];
    contextOptions?: NestApplicationContextOptions;
}
export declare abstract class AbstractBootstrapConsole<A extends INestApplicationContext, O extends CommonBootstrapConsoleOptions = CommonBootstrapConsoleOptions> {
    protected service: ConsoleService;
    protected container: A;
    protected readonly options: O;
    constructor(options: O);
    protected useDecorators(): Promise<this>;
    init(): Promise<A>;
    getService(): ConsoleService;
    getOptions(): O;
    boot(argv?: string[]): Promise<CommandResponse>;
    abstract create(): Promise<A>;
}
//# sourceMappingURL=abstract.d.ts.map